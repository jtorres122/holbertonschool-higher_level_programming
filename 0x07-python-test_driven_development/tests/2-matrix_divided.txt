============================
DOCTEST for 2-matrix_divided.py
============================
""" How to test matrix_divided() function """
# python3 -m doctest -v ./tests/2-matrix_divided.txt

___________________________________________

""" Importing the matrix_divided() function """
___________________________________________

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Normal Usage
============

>>> matrix = [
...    [1, 2, 3],
...    [4, 5, 6]
... ]

>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

>>> float_matrix = [
...    [1.23, 2.35, 3.78],
...    [4.32, 5.55, 6.98]
... ]

>>> matrix_divided(float_matrix, 3)
[[0.41, 0.78, 1.26], [1.44, 1.85, 2.33]]

>>> negint_matrix = [
...    [-1, -2, -3],
...    [-4, -5, -6]
... ]

>>> matrix_divided(negint_matrix, 3)
[[-0.33, -0.67, -1.0], [-1.33, -1.67, -2.0]]

>>> negfloat_matrix = [
...    [-1.1, -2.36, -3.98],
...    [-4.56, -5.32, -6.76]
... ]

>>> matrix_divided(negfloat_matrix, 3)
[[-0.37, -0.79, -1.33], [-1.52, -1.77, -2.25]]


Edge Cases
==========

>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> matrix_divided(matrix, "hello")
Traceback (most recent call last):
...
TypeError: div must be a number

>>> matrix_divided()
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided("hello", 2)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> uneven_matrix = [
...    [1, 2, 3],
...    [4, 5, 6, 7, 8]
... ]

>>> matrix_divided(uneven_matrix, 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> wrongelem_matrix = [
...    [1, "wrong", 3],
...    [4, 5, 6]
... ]

>>> matrix_divided(wrongelem_matrix, 3)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided(matrix, -2)
[[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

>>> matrix_divided(negint_matrix, -2)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

>>> empty = [[]]

>>> matrix_divided(empty, 3)
[[]]
